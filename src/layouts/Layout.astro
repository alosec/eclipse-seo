---
import Header from '../components/Header.astro';
import MobileSidebar from '../components/MobileSidebar.astro';
import Footer from '../components/Footer.astro';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Learn about eclipses, their types, and when to see them next." } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" data-theme="purple">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <Header />
    <MobileSidebar />

    <main class="main">
      <div class="content">
        <slot />
      </div>
    </main>

    <Footer />

    <script>
      const mobileMenuBtn = document.getElementById('mobile-menu-btn');
      const mobileSidebar = document.getElementById('mobile-sidebar');
      const themeToggleBtn = document.getElementById('theme-toggle-btn');
      const mobileThemeToggleBtn = document.getElementById('mobile-theme-toggle');
      
      const themes = ['purple', 'light', 'dark'];
      const themeEmojis = { light: 'ðŸŒž', dark: 'ðŸŒš', purple: 'ðŸŒ‘' };
      
      let currentThemeIndex = 0;
      
      function switchTheme() {
        currentThemeIndex = (currentThemeIndex + 1) % themes.length;
        const newTheme = themes[currentThemeIndex];
        document.documentElement.setAttribute('data-theme', newTheme);
        const emoji = themeEmojis[newTheme];
        if (themeToggleBtn) {
          themeToggleBtn.textContent = emoji;
        }
        if (mobileThemeToggleBtn) {
          mobileThemeToggleBtn.textContent = emoji;
        }
      }
      
      themeToggleBtn?.addEventListener('click', switchTheme);
      mobileThemeToggleBtn?.addEventListener('click', switchTheme);
      
      mobileMenuBtn?.addEventListener('click', () => {
        mobileSidebar?.classList.toggle('open');
      });

      document.addEventListener('click', (e) => {
        if (!mobileSidebar?.contains(e.target as Node) && !mobileMenuBtn?.contains(e.target as Node)) {
          mobileSidebar?.classList.remove('open');
        }
      });
    </script>
  </body>
</html>

<style>
  :root[data-theme="light"] {
    --color-primary: #2B1B17;
    --color-secondary: #8B4513;
    --color-accent: #F4A460;
    --color-background: #FFFEF7;
    --color-surface: #FFFFFF;
    --color-text: #2B1B17;
    --color-text-secondary: #6B5B73;
    --color-border: #E5E7EB;
  }

  :root[data-theme="dark"] {
    --color-primary: #F4A460;
    --color-secondary: #CD853F;
    --color-accent: #FFD700;
    --color-background: #0A0A0A;
    --color-surface: #1A1A1A;
    --color-text: #F4A460;
    --color-text-secondary: #CD853F;
    --color-border: #2A2A2A;
  }

  :root[data-theme="purple"] {
    --color-primary: #6A0DAD;
    --color-secondary: #8A2BE2;
    --color-accent: #DA70D6;
    --color-background: #0D0015;
    --color-surface: #1A0B2E;
    --color-text: #E6E6FA;
    --color-text-secondary: #D8BFD8;
    --color-border: #483D8B;
  }

  :root {
    --font-primary: 'Inter', system-ui, -apple-system, sans-serif;
    --font-mono: 'JetBrains Mono', 'Fira Code', monospace;
    --text-xs: 0.75rem;
    --text-sm: 0.875rem;
    --text-base: 1rem;
    --text-lg: 1.125rem;
    --text-xl: 1.25rem;
    --text-2xl: 1.5rem;
    --text-3xl: 1.875rem;
    --text-4xl: 2.25rem;
    --space-1: 0.25rem;
    --space-2: 0.5rem;
    --space-3: 0.75rem;
    --space-4: 1rem;
    --space-6: 1.5rem;
    --space-8: 2rem;
    --space-12: 3rem;
    --space-16: 4rem;
    --space-24: 6rem;
    --max-width: 80rem;
    --header-height: 4rem;
    --sidebar-width: 20rem;
    --border-radius: 0.5rem;
    --transition: all 0.2s ease;
  }

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  html {
    font-family: var(--font-primary);
    background: var(--color-background);
    color: var(--color-text);
    transition: var(--transition);
  }

  body {
    line-height: 1.6;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  .header {
    background: var(--color-surface);
    border-bottom: 1px solid var(--color-border);
    position: sticky;
    top: 0;
    z-index: 100;
    height: var(--header-height);
  }

  .header-content {
    max-width: var(--max-width);
    margin: 0 auto;
    padding: 0 var(--space-4);
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }


  .main {
    flex: 1;
    padding-top: var(--space-4);
  }

  .content {
    max-width: var(--max-width);
    margin: 0 auto;
    padding: 0 var(--space-4);
  }

</style>